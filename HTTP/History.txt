HTTP/1.0 – Building extensibility
    HTTP/0.9 was very limited and both browsers and servers quickly extended
    it to be more versatile:
    * Versioning information is now sent within each request
        (HTTP/1.0 is appended to the GET line)
    * A status code line is also sent at the beginning of the response, allowing
        the browser itself to understand the success or failure of the request
        and to adapt its behavior in consequence (like in updating or using its
        local cache in a specific way)
    * The notion of HTTP headers has been introduced, both for the requests and
        the responses, allowing metadata to be transmitted and making the protocol
        extremely flexible and extensible.
    * With the help of the new HTTP headers, the ability to transmit other documents
        than plain HTML files has been added (thanks to the Content-Type header).

HTTP/1.1 – The standardized protocol
    HTTP/1.1 clarified ambiguities and introduced numerous improvements:
    * A connection can be reused, saving the time to reopen it numerous times to
        display the resources embedded into the single original document retrieved.
    * Pipelining has been added, allowing to send a second request before the answer
        for the first one is fully transmitted, lowering the latency of the communication.
    * Chunked responses are now also supported.
    * Additional cache control mechanisms have been introduced.
    * Content negotiation, including language, encoding, or type, has been introduced,
        and allows a client and a server to agree on the most adequate content to exchange.
    * Thanks to the Host header, the ability to host different domains at the same IP
        address now allows server collocation.

Using HTTP for secure transmissions
    The largest change that happened to HTTP was done as early as end of 1994. Instead
    of sending HTTP over a basic TCP/IP stack, Netscape Communication created an
    additional encrypted transmission layer on top of it: SSL. SSL 1.0 was never
    released outside the companies, but SSL 2.0 and its successors SSL 3.0 and SSL
    3.1 allowed for the creation of e-commerce Web sites by encrypting and guaranteeing
    the authenticity of the messages exchanged between the server and client. SSL was
    put on the standards track and eventually became TLS, with version 1.0, 1.1, and
    1.2 appearing successfully to close vulnerabilities. TLS 1.3 is currently in the making.

Using HTTP for complex applications
    The drawback of the REST model resides in the fact that each website defines its own
    non-standard RESTful API and has total control on it; unlike the *DAV extensions were
    clients and servers are interoperable. RESTful APIs became very common in the 2010s.

Relaxing the security-model of the Web
    HTTP is independent of the security model of the Web, the same-origin policy. In fact,
    the current Web security model has been developed after the creation of HTTP! Over
    the years, it has proved useful to be able to be more lenient, by allowing under
    certain constraints to lift some of the restriction of this policy. How much and
    when such restrictions are lifted is transmitted by the server to the client using
    a new bunch of HTTP headers. These are defined in specifications like Cross-Origin
    Resource Sharing (CORS) or the Content Security Policy (CSP).
    In addition to these large extensions, numerous other headers have been added,
    sometimes experimentally only. Notable headers are Do Not Track (DNT) header to
    control privacy, X-Frame-Options, or Upgrade-Insecure-Requests but many more exist.

HTTP/2 – A protocol for greater performance
    The HTTP/2 protocol has several prime differences from the HTTP/1.1 version:
    * It is a binary protocol rather than text. It can no longer be read and created
        manually despite this hurdle, improved optimization techniques can now be
        implemented.
    * It is a multiplexed protocol. Parallel requests can be handled over the same
        connection, removing the order and blocking constraints of the HTTP/1.x
        protocol.
    * It compresses headers. As these are often similar among a set of requests,
        this removes duplication and overhead of data transmitted.
    * It allows a server to populate data in a client cache, in advance of it
        being required, through a mechanism called the server push.

Post-HTTP/2 evolution
    * Support of Alt-Svc allows the dissociation of the identification and the
        location of a given resource, allowing for a smarter CDN caching mechanism.
    * The introduction of Client-Hints allows the browser, or client, to proactively
        communicate information about its requirements, or hardware constraints,
        to the server.
    * The introduction of security-related prefixes in the Cookie header, now helps
        guarantee a secure cookie has not been altered.