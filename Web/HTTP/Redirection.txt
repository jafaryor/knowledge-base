URL redirection, or URL forwarding, is a technique to keep links alive while the actual
resource, being a page, a form or a whole Web application, is located at a different URL.
HTTP provides a special kind of responses, HTTP redirects, to perform this operation used
for numerous goals: temporary redirection while site maintenance is ongoing, permanent
redirection to keep external links working after a change of the site's architecture,
progress pages when uploading a file, and many more …

Principle
    In HTTP, a redirection is triggered by the server by sending special responses to a
    request: redirects. HTTP redirects are responses with a status code of 3xx. A browser,
    when receiving a redirect response, uses the new URL provided and immediately loads
    it: most of the time, the redirection is transparent to the user, besides a small
    performance hit.

There are several types of redirects and they fall into three categories:    
    * Permanent redirections.
        These redirections are meant to last forever. They imply that the original URL
        should not be used anymore and that the new one is preferred. Search engine robots
        trigger an update of the associated URL for the resource in their indexes.
            301 - Moved Permanently
            308 - Permanent Redirect
    * Temporary redirections
        Sometimes the requested resource cannot be accessed from its canonical location,
        but it can be accessed from another place. In this case a temporary redirect can
        be used. Search engine robots don't memorize the new, temporary link. Temporary
        redirections are also used when creating, updating and deleting resources to
        present temporary progress pages.
            302 - Found
            303 - See Other
            307 - Temporary Redirect
    * Special redirections
        In addition to these usual redirections, there are two specific redirections.
        The 304 (Not Modified) redirects a page to the locally cached copy (that was stale),
        and 300 (Multiple Choice) is a manual redirection: the body, presented by the
        browser as a Web page, lists the possible redirections and the user clicks
        on one to select it.
            300 - Multiple Choice
            304 - Not Modified

Alternative way of specifying redirections
    HTTP redirects aren't the only way to define redirections. There are two other methods:
        * HTML redirections using the <meta> element
            HTTP redirects are the preferred way to create redirections, but sometimes the
            Web developer doesn't have control over the server or cannot configure it. For
            these specific cases, the Web developers can craft an HTML page with a <meta>
            element and the http-equiv attribute set to refresh in the <head> of the page.
            -----------------------------------------------------------------------------
                <head> 
                    <meta http-equiv="refresh" content="0; URL=http://www.example.com/" />
                </head>
            -----------------------------------------------------------------------------
            The content attribute starts with a number indicating how many seconds the
            browser should wait before redirecting to the given URL. Always set it to 0,
            for better accessibility.
            !Note that these redirections break the back button in browser: you can go
            back to a page with this header but it instantaneously moves forward again.
        * JavaScript redirections using the DOM.
            -----------------------------------------------------------------------------
                window.location = "http://www.example.com/";
            -----------------------------------------------------------------------------

Order of precedence
    1. HTTP redirects are always executed first when there is not even a page transmitted,
        and of course not even read.
    2. HTML redirects (<meta>) are executed if there weren't any HTTP redirects.
    3. JavaScript redirects are used as the last resort, and only if JavaScript is
        enabled on the client side.

Use cases
    * Domain aliasing
        Ideally, there is one location, and therefore one URL, for one resource. But there
        are reasons for wanting to have alternative names for a resource (several domains,
        like with and without the www prefix or shorter and easy to remember URLs, …). In
        these cases, rather than duplicating the resource, it is useful to use a redirect
        to the one true (canonical) URL.
        Domain aliasing can be done for several reasons:
            * Expanding the reach of your site. A common case is when your site resides under
                the www.example.com domain and accessing your pages from example.com should
                be possible, too. Redirections for example.com pages to www.example.com are
                set up in this case. You might also provide commonly used synonym names, or
                frequent typos of your domain names.
            * Moving to a different domain. For example, your company has been renamed and
                you when searching for the old name, you want people used to the old company
                Web site still find you under the new name.
            * Forcing HTTPS. Requests to the HTTP version of your site will be redirected
                to the HTTPS version of your site.

    * Keeping links alive
        When you restructure Web sites, URLs of resources change. Even if you can update the
        internal links of your Web site to match the new naming scheme, you have no control
        over the URLs used by external resources. You don't want to break these links, as
        they bring you valuable users (and help your SEO), so you set up redirects from the
        old URLs to the new ones.
        !Even if this technique also works for internal links, you should try to avoid having
        internal redirects. A redirect has a significant performance cost (as an extra HTTP
        request is done) and if you can avoid it by correcting internal links, you should
        fix these links.

    * Temporary responses to unsafe requests
        Unsafe requests modify the state of the server and the user shouldn't replay them
        inadvertently. Typically, you don't want your users to resend PUT, POST or DELETE
        requests. If you just serve the response as the result of this request, a simple
        press of the reload button will (possibly after a confirmation message),
        resend the request.
        In this case, the server can send back a 303 (See Other) response that will contain
        the right information, but if the reload button is pressed, only this page is
        redisplayed, without replaying the unsafe requests.

    * Temporary responses for long requests
        Some requests may need more time on the server, like sometimes DELETE requests that
        are scheduled for later processing. In this case, the response is a 303 (See Other)
        redirect that links to a page indicating that the action has been scheduled, and
        eventually informs about the progress, or allows to cancel it.

Redirection loops
    Redirection loops happen when successive redirections follow the one that has already
    been followed. In other words, there is a loop that will never be finished and no page
    will be found ultimately.
    Most of the time this is a server problem, and if the server cannot detect it, it will
    send back a 500 Internal Server Error. If you encounter such an error soon after modifying
    a server configuration, this is likely a redirection loop.