The performance of web sites and applications can be significantly improved by
    reusing previously fetched resources. Web caches reduce latency and network
    traffic and thus lessen the time needed to display a representation of a
    resource. By making use of HTTP caching, Web sites become more responsive.

Caching is a technique that stores a copy of a given resource and serves it back
    when requested. When a web cache has a requested resource in its store, it
    intercepts the request and returns its copy instead of re-downloading from
    the originating server. This achieves several goals: it eases the load of
    the server that doesn’t need to serve all clients itself, and it improves
    performance by being closer to the client, i.e., it takes less time to
    transmit the resource back.
    
For a web site, it is a major component in achieving high performance.
    On the other side, it has to be configured properly as not all resources
    stay identical forever: it is important to cache a resource only until
    it changes, not longer.

A SHARED CACHE is a cache that stores responses for reuse by more than one user.
A PRIVATE CACHE is dedicated to a single user.

Controlling caching
    * The Cache-control header
        Use this header to define your caching policies with the variety of
        directives it provides.
    * No cache storage at all
        The cache should not store anything about the client request or server
        response. A request is sent to the server and a full response is
        downloaded each and every time.
            Cache-Control: no-store
            Cache-Control: no-cache, no-store, must-revalidate
    * No caching
        A cache will send the request to the origin server for validation
        before releasing a cached copy.
            Cache-Control: no-cache
    * Private and public caches
        The "public" directive indicates that the response may be cached by any
        cache. This can be useful, if pages with HTTP authentication or response
        status codes that aren't normally cacheable, should now be cached. On the
        other hand, "private" indicates that the response is intended for a single
        user only and must not be stored by a shared cache.
            Cache-Control: private
            Cache-Control: public
    * Expiration
        The most important directive here is "max-age=<seconds>" which is the
        maximum amount of time a resource will be considered fresh.
            Cache-Control: max-age=100      -> calculated in seconds
    * Validation
        When using the "must-revalidate" directive, the cache must verify the
        status of the stale resources before using it and expired ones should
        not be used.
            Cache-Control: must-revalidate

Freshness
    Before this expiration time, the resource is fresh; after the expiration time,
    the resource is stale. Eviction algorithms often privilege fresh resources over
    stale resources. Note that a stale resource is not evicted or ignored; when the
    cache receives a request for a stale resource, it forwards this request with a
    If-None-Match to check if it is in fact still fresh. If so, the server returns
    a 304 (Not Modified) header without sending the body of the requested resource,
    saving some bandwidth.
    The freshness lifetime is calculated based on several headers. If a
    "Cache-control: max-age=N" header is specified, then the freshness lifetime is
    equal to N. If this header is not present, which is very often the case, it is
    checked if an Expires header is present. If an Expires header exists, then its
    value minus the value of the Date header determines the freshness lifetime.
    Finally, if neither header is present, look for a Last-Modified header. If this
    header is present, then the cache's freshness lifetime is equal to the value of
    the Date header minus the value of the Last-modified header divided by 10.
    The expiration time is computed as follows:
        expirationTime = responseTime + freshnessLifetime - currentAge
    where responseTime is the time at which the response was received according
    to the browser.

REVVING
    Infrequently updated files are named in specific way: in their URL, usually in
    the filename, a revision (or version) number is added. That way each new
    revision of this resource is considered as a resource on its own that never
    changes and that can have an expiration time very far in the future, usually
    one year or even more. In order to have the new versions, all the links to
    them must be changed, that is the drawback of this method: additional complexity
    that is usually taken care of by the tool chain used by Web developers. When the
    infrequently variable resources change they induce an additional change to often
    variable resources. When these are read, the new versions of the others are
    also read.
    This technique has an additional benefit: updating two cached resources at the
    same time will not lead to the situation where the out-dated version of one
    resource is used in combination with the new version of the other one. This
    is very important when web sites have CSS stylesheets or JS scripts that
    have mutual dependencies, i.e., they depend on each other because they refer
    to the same HTML elements.

Cache validation
    Revalidation is triggered when the user presses the reload button. It is also
    triggered under normal browsing if the cached response includes the
    "Cache-control: must-revalidate" header. Another factor is the cache
    validation preferences in the Advanced->Cache preferences panel. There
    is an option to force a validation each time a document is loaded.
    When a cached document's expiration time has been reached, it is either
    validated or fetched again. Validation can only occur if the server
    provided either a strong validator or a weak validator.

ETags
    The ETag response header is an opaque-to-the-useragent value that can be
    used as a strong validator. That means that a HTTP user-agent, such as
    the browser, does not know what this string represents and can't predict
    what its value would be. If the ETag header was part of the response
    for a resource, the client can issue an If-None-Match in the header of
    future requests – in order to validate the cached resource.
    The Last-Modified response header can be used as a weak validator. It is
    considered weak because it only has 1-second resolution. If the Last-Modified
    header is present in a response, then the client can issue an If-Modified-Since
    request header to validate the cached document.
    When a validation request is made, the server can either ignore the
    validation request and response with a normal 200 OK, or it can return
    304 Not Modified (with an empty body) to instruct the browser to use its
    cached copy. The latter response can also include headers that update the
    expiration time of the cached document.

Varying responses
    The Vary HTTP response header determines how to match future request headers to
    decide whether a cached response can be used rather than requesting a fresh one
    from the origin server.
    When a cache receives a request that can be satisfied by a cached response that
    has a Vary header field, it must not use that cached response unless all header
    fields as nominated by the Vary header match in both the original (cached)
    request and the new request.
    This can be useful for serving content dynamically, for example. When using the
    Vary: User-Agent header, caching servers should consider the user agent when
    deciding whether to serve the page from cache. If you are serving different
    content to mobile users, it can help you to avoid that a cache may mistakenly
    serve a desktop version of your site to your mobile users. In addition, it can
    help Google and other search engines to discover the mobile version of a page,
    and might also tell them that no Cloaking is intended.
        Vary: User-Agent
    Because the User-Agent header value is different ("varies") for mobile and desktop
    clients, caches will not be used to serve mobile content mistakenly to desktop
    users or vice versa.